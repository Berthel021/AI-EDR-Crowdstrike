name: AI-Threat-Detection-CrowdStrike-CICD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PYTHON_VERSION: "3.10.12"
  MODEL_DIR: "models"
  DATA_DIR: "data"

jobs:
  setup:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Create directories
        run: |
          mkdir -p ${{ env.MODEL_DIR }}
          mkdir -p ${{ env.DATA_DIR }}

      - name: Install core dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy==1.24.0 pandas==2.0.0 scikit-learn==1.3.0

  train-ransomware:
    needs: setup
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install ransomware-specific dependencies
        run: |
          pip install tensorflow==2.12.0 keras==2.12.0
          
      - name: Generate ransomware training data
        run: |
          python -c "
          import numpy as np
          from sklearn.datasets import make_classification
          X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)
          np.savez('${{ env.DATA_DIR }}/ransomware_data.npz', X=X, y=y)
          "
          
      - name: Train ransomware model
        run: |
          python -c "
          import numpy as np
          from sklearn.ensemble import RandomForestClassifier
          from joblib import dump
          
          data = np.load('${{ env.DATA_DIR }}/ransomware_data.npz')
          X, y = data['X'], data['y']
          
          model = RandomForestClassifier(n_estimators=100, random_state=42)
          model.fit(X, y)
          
          dump(model, '${{ env.MODEL_DIR }}/ransomware_model.joblib')
          print('Ransomware model trained successfully')
          "

  train-ddos:
    needs: setup
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install DDoS-specific dependencies
        run: |
          pip install xgboost==1.7.3 scipy==1.10.1
          
      - name: Generate DDoS training data
        run: |
          python -c "
          import numpy as np
          from sklearn.datasets import make_classification
          X, y = make_classification(n_samples=1500, n_features=15, n_classes=2, 
                                   n_clusters_per_class=1, random_state=42)
          np.savez('${{ env.DATA_DIR }}/ddos_data.npz', X=X, y=y)
          "
          
      - name: Train DDoS model
        run: |
          python -c "
          import numpy as np
          from xgboost import XGBClassifier
          from joblib import dump
          
          data = np.load('${{ env.DATA_DIR }}/ddos_data.npz')
          X, y = data['X'], data['y']
          
          model = XGBClassifier(n_estimators=100, random_state=42)
          model.fit(X, y)
          
          dump(model, '${{ env.MODEL_DIR }}/ddos_model.joblib')
          print('DDoS model trained successfully')
          "

  verify-models:
    needs: [train-ransomware, train-ddos]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Check model files
        run: |
          echo "Model files:"
          ls -lh ${{ env.MODEL_DIR }}
          [ -f "${{ env.MODEL_DIR }}/ransomware_model.joblib" ] || exit 1
          [ -f "${{ env.MODEL_DIR }}/ddos_model.joblib" ] || exit 1
          
      - name: Test model loading
        run: |
          python -c "
          from joblib import load
          try:
              ransomware_model = load('${{ env.MODEL_DIR }}/ransomware_model.joblib')
              ddos_model = load('${{ env.MODEL_DIR }}/ddos_model.joblib')
              print('Models loaded successfully')
          except Exception as e:
              print(f'Error loading models: {str(e)}')
              raise
          "

  upload:
    needs: verify-models
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Upload models
        uses: actions/upload-artifact@v4
        with:
          name: threat-models
          path: ${{ env.MODEL_DIR }}/*.joblib
          retention-days: 7
