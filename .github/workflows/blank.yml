name: AI-Threat-Detection-CrowdStrike-CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly retraining

env:
  AWS_REGION: us-east-1
  ECR_REPO: your-ecr-repo/ai-threat-detection
  FALCON_API_TEST_CREDS: ${{ secrets.FALCON_TEST_CREDS }}

jobs:
  train-models:
    runs-on: ubuntu-latest
    container: python:3.8
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install boto3 scikit-learn tensorflow
          
      - name: Train Ransomware Model
        run: |
          python src/train_ransomware_model.py \
            --data cic-ids-2017 \
            --output models/ransomware_model.pkl
          
      - name: Train DDoS Model
        run: |
          python src/train_ddos_model.py \
            --data cic-ddos-2019 \
            --output models/ddos_model.pkl
      
      - name: Upload Models
        uses: actions/upload-artifact@v3
        with:
          name: threat-models
          path: models/*.pkl

  test-integration:
    needs: train-models
    runs-on: ubuntu-latest
    services:
      mock-falcon-api:
        image: yourorg/mock-falcon-api:v1
        ports:
          - "8080:8080"
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Models
        uses: actions/download-artifact@v3
        with:
          name: threat-models
          path: models
          
      - name: Run Integration Tests
        env:
          FALCON_BASE_URL: "http://localhost:8080"
        run: |
          pytest tests/integration/ \
            --cov=src \
            --cov-report=xml
          
      - name: Upload Coverage
        uses: codecov/codecov-action@v3

  deploy-to-aws:
    needs: test-integration
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Models
        uses: actions/download-artifact@v3
        with:
          name: threat-models
          path: models
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
          
      - name: Build Docker Image
        run: |
          docker build -t $ECR_REPO:$GITHUB_SHA .
          
      - name: Push to ECR
        run: |
          docker push $ECR_REPO:$GITHUB_SHA
          
      - name: Deploy Lambda
        run: |
          aws lambda update-function-code \
            --function-name CrowdStrikeAIDetector \
            --image-uri $ECR_REPO:$GITHUB_SHA

  falcon-api-validation:
    needs: deploy-to-aws
    runs-on: ubuntu-latest
    steps:
      - name: Test Live Falcon API
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api.crowdstrike.com/detects?filter=ai_model:true"
          method: GET
          customHeaders: '{"Authorization": "Bearer ${{ secrets.FALCON_API_KEY }}"}'
          timeout: 10000
